// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch"]
}

generator zod {
  provider = "npx zod-prisma-types"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  accounts Account[]
  sessions Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id             String    @id @default(cuid())
  crn            String    @unique
  name           String
  phone          String?
  registeredAt   DateTime?
  repName        String
  repMobile      String
  certificateUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users          User[]
  products       Product[]
  productOptions ProductOption[]
  purchaseOrders PurchaseOrder[]
  sales          Sale[]
  salesChannels  SalesChannel[]
}

model Product {
  id          String @id @default(cuid())
  name        String
  purchasedAt String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String

  company Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  options ProductOption[]
}

model ProductOption {
  id                String              @id @default(cuid())
  name              String
  imageUrl          String?
  unitPrice         Float               @default(0)
  currency          Currency            @default(CNY)
  importedFrom      Country             @default(CN)
  inventoryQuantity Int                 @default(0)
  leadtime          Int                 @default(21)
  status            ProductOptionStatus @default(ON_SALE)
  location          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  companyId String

  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  company        Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  purchaseOrders PurchaseOrder[]
  sales          Sale[]
}

model PurchaseOrder {
  id               String              @id @default(cuid())
  orderedQuantity  Int                 @default(0)
  orderedAt        DateTime
  receivedQuantity Int?                @default(0)
  receivedAt       DateTime?
  status           PurchaseOrderStatus @default(ORDERED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productOptionId String
  companyId       String

  productOption ProductOption @relation(fields: [productOptionId], references: [id], onDelete: Cascade)
  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Sale {
  id       String   @id @default(cuid())
  quantity Int      @default(0)
  soldAt   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productOptionId String
  channelId       String
  companyId       String

  productOption ProductOption @relation(fields: [productOptionId], references: [id], onDelete: Cascade)
  channel       SalesChannel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model SalesChannel {
  id   String  @id @default(cuid())
  name String
  url  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sales   Sale[]
}

enum PurchaseOrderStatus {
  ORDERED
  RECEIVED
}

enum ProductOptionStatus {
  ON_SALE
  SUSPENDED
}

enum Currency {
  KRW
  CNY
  JPY
}

enum Country {
  KR
  CN
  JP
}
